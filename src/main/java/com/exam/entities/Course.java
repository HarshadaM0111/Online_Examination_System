package com.exam.entities;

import java.util.List;
import javax.persistence.*;
import java.util.Objects;

@Entity // Marks this class as a JPA entity for ORM mapping
@Table(name = "courses") // Maps this entity to the "courses" table in the database
public class Course {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY) // Primary key, auto-generated by the database
    private int courseId;

    @Column(nullable = false, unique = true)
    private String courseName; // Unique name of the course (e.g., Java Basics)

    @Column(nullable = false)
    private String description; // Brief description of the course

    @ManyToOne // Many courses can be assigned to one instructor
    @JoinColumn(name = "instructor_id") // Foreign key in the courses table
    private Instructor instructor;

    @OneToMany(
        fetch = FetchType.EAGER, // Load topics immediately when course is fetched
        mappedBy = "course",     // 'course' is the owning side in Topic class
        cascade = CascadeType.ALL, // Changes to course cascade to its topics
        orphanRemoval = true // Deletes topics if removed from course
    )
    private List<Topic> topics; // Topics under this course

    @ManyToMany(mappedBy = "enrolledCourses", fetch = FetchType.LAZY) // Lazy loading for performance
    private List<Student> students; // Students enrolled in this course

    // === Constructors ===

    public Course() {} // Default constructor for JPA

    // Constructor with all fields (excluding students for simplicity)
    public Course(int courseId, String courseName, String description, Instructor instructor, List<Topic> topics) {
        this.courseId = courseId;
        this.courseName = courseName;
        this.description = description;
        this.instructor = instructor;
        this.topics = topics;
    }

    // === Getters and Setters ===

    public int getCourseId() {
        return courseId;
    }

    public void setCourseId(int courseId) {
        this.courseId = courseId;
    }

    public String getCourseName() {
        return courseName;
    }

    public void setCourseName(String courseName) {
        this.courseName = courseName;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Instructor getInstructor() {
        return instructor;
    }

    public void setInstructor(Instructor instructor) {
        this.instructor = instructor;
    }

    public List<Topic> getTopics() {
        return topics;
    }

    public void setTopics(List<Topic> topics) {
        this.topics = topics;
    }

    public List<Student> getStudents() {
        return students;
    }

    public void setStudents(List<Student> students) {
        this.students = students;
    }

    // === Utility Methods ===

    // Checks equality based on courseId (unique identifier)
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Course)) return false;
        Course course = (Course) o;
        return courseId == course.courseId;
    }

    // Returns instructor ID or -1 if no instructor is assigned
    public int getInstructorId() {
        if (instructor != null) {
            return instructor.getInstructorId();
        }
        return -1; // Default/fallback value
    }

    @Override
    public int hashCode() {
        return Objects.hash(courseId); // Use courseId to generate hash
    }

    // String representation for debugging/logging
    @Override
    public String toString() {
        return "Course [courseId=" + courseId + ", courseName=" + courseName + ", description=" + description
                + ", instructor=" + instructor + ", topics=" + topics + "]";
    }
}
